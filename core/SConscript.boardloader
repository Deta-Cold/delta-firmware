# pylint: disable=E0602

import os
import tools

detahard_MODEL = ARGUMENTS.get('detahard_MODEL', 'T')
CMAKELISTS = int(ARGUMENTS.get('CMAKELISTS', 0))

if detahard_MODEL in ('1', ):
    # skip boardloader build
    env = Environment()
    def build_boardloader(target,source,env):
        print(f'Boardloader: nothing to build for Model {detahard_MODEL}')
    program_bin = env.Command(
                 target='boardloader.bin',
                 source=None,
                 action=build_boardloader
             )
    Return()

FEATURES_WANTED = ["sd_card"]

CCFLAGS_MOD = ''
CPPPATH_MOD = []
CPPDEFINES_MOD = []
SOURCE_MOD = []

# moddetahardcrypto
CCFLAGS_MOD += '-Wno-sequence-point '
CPPPATH_MOD += [
    'vendor/detahard-crypto',
]
CPPDEFINES_MOD += [
    'AES_128',
    'AES_192',
    'USE_KECCAK',
    'ED25519_NO_PRECOMP',
]
SOURCE_MOD += [
    'vendor/detahard-crypto/blake2s.c',
    'vendor/detahard-crypto/ed25519-donna/curve25519-donna-32bit.c',
    'vendor/detahard-crypto/ed25519-donna/curve25519-donna-helpers.c',
    'vendor/detahard-crypto/ed25519-donna/ed25519.c',
    'vendor/detahard-crypto/ed25519-donna/ed25519-donna-32bit-tables.c',
    'vendor/detahard-crypto/ed25519-donna/ed25519-donna-impl-base.c',
    'vendor/detahard-crypto/ed25519-donna/modm-donna-32bit.c',
    'vendor/detahard-crypto/memzero.c',
    'vendor/detahard-crypto/sha2.c',
]

# moddetahardui
CPPPATH_MOD += [
        'vendor/micropython/lib/uzlib',
]
SOURCE_MOD += [
    'embed/lib/display.c',
    'embed/lib/colors.c',
    'embed/lib/fonts/fonts.c',
    'embed/lib/fonts/font_bitmap.c',
]

SOURCE_STMHAL = [
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_sd.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_sram.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_fmc.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_sdmmc.c',
    'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c',
]

SOURCE_BOARDLOADER = [
    'embed/boardloader/startup.s',
    'embed/boardloader/main.c',
]

SOURCE_detahardHAL = [
    'embed/detahardhal/board_capabilities.c',
    'embed/detahardhal/common.c',
    'embed/detahardhal/dma.c',
    'embed/detahardhal/image.c',
    'embed/detahardhal/flash.c',
    'embed/detahardhal/lowlevel.c',
    'embed/detahardhal/mini_printf.c',
    'embed/detahardhal/stm32.c',
    'embed/detahardhal/systick.c',
    'embed/detahardhal/rng.c',
    'embed/detahardhal/util.s',
    'embed/detahardhal/vectortable.s',
]

env = Environment(ENV=os.environ, CFLAGS='%s -DPRODUCTION=%s' % (ARGUMENTS.get('CFLAGS', ''), ARGUMENTS.get('PRODUCTION', '0')))

FEATURES_AVAILABLE = tools.configure_board(detahard_MODEL, FEATURES_WANTED, env, CPPDEFINES_MOD, SOURCE_detahardHAL)

env.Replace(
    CP='cp',
    AS='arm-none-eabi-as',
    AR='arm-none-eabi-ar',
    CC='arm-none-eabi-gcc',
    LINK='arm-none-eabi-gcc',
    SIZE='arm-none-eabi-size',
    STRIP='arm-none-eabi-strip',
    OBJCOPY='arm-none-eabi-objcopy',
    PYTHON='python',
    MAKECMAKELISTS='$PYTHON tools/make_cmakelists.py',)

env.Replace(
    detahard_MODEL=detahard_MODEL, )

if detahard_MODEL in ('T', 'R'):
    CPU_ASFLAGS = '-mthumb -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16'
    CPU_CCFLAGS = '-mthumb -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -mtune=cortex-m4 '
    CPU_MODEL   = 'STM32F427xx'
else:
    raise ValueError('Unknown detahard model')

env.Replace(
    COPT=env.get('ENV').get('OPTIMIZE', '-Os'),
    CCFLAGS='$COPT '
    '-g3 '
    '-nostdlib '
    '-std=gnu99 -Wall -Werror -Wdouble-promotion -Wpointer-arith -Wno-missing-braces -fno-common '
    '-fsingle-precision-constant -fdata-sections -ffunction-sections '
    '-ffreestanding '
    '-fstack-protector-all '
    + CPU_CCFLAGS + CCFLAGS_MOD,
    CCFLAGS_QSTR='-DNO_QSTR -DN_X64 -DN_X86 -DN_THUMB',
    LINKFLAGS='-T embed/boardloader/memory.ld -Wl,--gc-sections -Wl,-Map=build/boardloader/boardloader.map -Wl,--warn-common  -Wl,--print-memory-usage',
    CPPPATH=[
        'embed/boardloader',
        'embed/lib',
        'embed/detahardhal',
        'embed/extmod/moddetahardui',
        'vendor/micropython/stmhal',
        'vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Inc',
        'vendor/micropython/lib/stm32lib/CMSIS/STM32F4xx/Include',
        'vendor/micropython/lib/cmsis/inc',
    ] + CPPPATH_MOD,
    CPPDEFINES=[
        'BOARDLOADER',
        'detahard_MODEL_'+detahard_MODEL,
        CPU_MODEL,
        'USE_HAL_DRIVER',
        ('STM32_HAL_H', '"<stm32f4xx.h>"'),
    ] + CPPDEFINES_MOD,
    ASFLAGS=CPU_ASFLAGS,
    ASPPFLAGS='$CFLAGS $CCFLAGS', )

env.Replace(
    ALLSOURCES=SOURCE_MOD + SOURCE_BOARDLOADER + SOURCE_STMHAL + SOURCE_detahardHAL,
    ALLDEFS=tools.get_defs_for_cmake(env['CPPDEFINES']))

cmake_gen = env.Command(
    target='CMakeLists.txt',
    source='',
    action='$MAKECMAKELISTS --sources $ALLSOURCES --dirs $CPPPATH --defs $ALLDEFS',
)

#
# Program objects
#

obj_program = []
obj_program += env.Object(source=SOURCE_MOD)
obj_program += env.Object(source=SOURCE_BOARDLOADER)
obj_program += env.Object(source=SOURCE_STMHAL)
obj_program += env.Object(source=SOURCE_detahardHAL)

program_elf = env.Command(
    target='boardloader.elf',
    source=obj_program,
    action=
    '$LINK -o $TARGET $CCFLAGS $CFLAGS $LINKFLAGS $SOURCES -lc_nano -lgcc',
)

BINARY_NAME = f"build/boardloader/boardloader-{tools.get_model_identifier(detahard_MODEL)}"
BINARY_NAME += "-" + tools.get_version('embed/boardloader/version.h')
BINARY_NAME += "-" + tools.get_git_revision_short_hash()
BINARY_NAME += "-dirty" if tools.get_git_modified() else ""
BINARY_NAME += ".bin"

if CMAKELISTS != 0:
    env.Depends(program_elf, cmake_gen)

program_bin = env.Command(
    target='boardloader.bin',
    source=program_elf,
    action=[
        '$OBJCOPY -O binary $SOURCE $TARGET',
        '$CP $TARGET ' + BINARY_NAME,
    ],
)
